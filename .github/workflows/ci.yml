name: CI
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read
  packages: write
  pull-requests: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Test (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    
    outputs:
      coverage: ${{ steps.coverage.outputs.percentage }}
      
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
          cache-dependency-path: requirements-dev.txt
      
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements-dev.txt
      
      - name: Lint with ruff
        run: ruff check . --exit-zero
      
      - name: Test with pytest
        run: |
          mkdir -p reports
          pytest --junitxml=reports/junit.xml \
                 --cov=sample_app \
                 --cov-report=xml:reports/coverage.xml \
                 --cov-report=html:reports/htmlcov \
                 --cov-fail-under=90
      
      - name: Extract coverage percentage
        id: coverage
        if: matrix.python-version == '3.12'  # Only extract once
        run: |
          COVERAGE=$(python -c "import xml.etree.ElementTree as ET; tree = ET.parse('reports/coverage.xml'); print(f\"{float(tree.getroot().attrib['line-rate']) * 100:.1f}%\")")
          echo "percentage=$COVERAGE" >> $GITHUB_OUTPUT
      
      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-py${{ matrix.python-version }}
          path: reports/
          retention-days: 7

  docker:
    name: Build & Push Image
    runs-on: ubuntu-latest
    needs: test
    if: success()  # Only run if all tests pass
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.tags.outputs.tags }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Generate tags
        id: tags
        run: |
          TAGS="${REGISTRY}/${IMAGE_NAME}:sha-${GITHUB_SHA}"
          TAGS="${TAGS},${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:branch-${{ github.ref_name }}"
          if [[ "${{ github.ref_name }}" == "main" ]]; then
            TAGS="${TAGS},${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          fi
          echo "tags=${TAGS}" >> $GITHUB_OUTPUT
      
      - name: Build and push
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.tags.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
  
  comment:
    name: PR Comment
    runs-on: ubuntu-latest
    needs: [test, docker]
    if: github.event_name == 'pull_request' && !cancelled()
    
    steps:
      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const success = '${{ needs.test.result }}' === 'success' && '${{ needs.docker.result }}' === 'success';
            const coverage = '${{ needs.test.outputs.coverage }}' || 'N/A';
            
            let body = `## CI Results ${success ? '✅' : '❌'}\n\n`;
            body += `**Coverage:** ${coverage}\n`;
            
            if (success) {
              body += `**Docker Image:** \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${{ github.sha }}\`\n`;
              body += `\n[View packages →](https://github.com/${{ github.repository }}/pkgs/container/${{ github.event.repository.name }})`;
            }
            
            body += `\n\n[View artifacts →](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body
            });