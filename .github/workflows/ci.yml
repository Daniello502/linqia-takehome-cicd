name: CI
on:
  push:
    branches: [main]
    paths-ignore:
      - 'design.md'
  pull_request:
    branches: [main]
    paths-ignore:
      - 'design.md'

permissions:
  contents: read
  packages: write
  pull-requests: write
  security-events: write

env:
  REGISTRY: ghcr.io

jobs:
  test:
    name: Test (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    
    outputs:
      coverage: ${{ steps.coverage.outputs.percentage }}
      
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
          cache-dependency-path: requirements-dev.txt
      
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements-dev.txt
      
      - name: Lint with ruff
        run: ruff check . --exit-zero
      
      - name: Test with pytest
        run: |
          mkdir -p reports
          pytest --junitxml=reports/junit.xml \
                 --cov=sample_app \
                 --cov-report=xml:reports/coverage.xml \
                 --cov-report=html:reports/htmlcov \
                 --cov-fail-under=90
      
      - name: Extract coverage percentage
        id: coverage
        if: matrix.python-version == '3.12'
        run: |
          COVERAGE=$(python -c "import xml.etree.ElementTree as ET; tree = ET.parse('reports/coverage.xml'); print(f\"{float(tree.getroot().attrib['line-rate']) * 100:.1f}%\")")
          echo "percentage=$COVERAGE" >> $GITHUB_OUTPUT
      
      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-py${{ matrix.python-version }}
          path: reports/
          retention-days: 7

  docker:
    name: Build & Push Image
    runs-on: ubuntu-latest
    needs: test
    if: success()
    
    outputs:
      image-name: ${{ steps.image.outputs.name }}
      image-tags: ${{ steps.image.outputs.tags }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Generate image name and tags
        id: image
        env:
          BRANCH_REF: ${{ github.head_ref || github.ref_name }}
        run: |
          # Convert to lowercase for GHCR compatibility
          IMAGE_NAME=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          # Sanitize branch/ref name: lowercase, replace invalid chars with '-', trim leading/trailing separators
          RAW_BRANCH="$BRANCH_REF"
          SANITIZED_BRANCH=$(echo "$RAW_BRANCH" | tr '[:upper:]' '[:lower:]' | sed -E 's#[^a-z0-9._-]+#-#g' | sed -E 's#-+#-#g' | sed -E 's#(^[._-]+|[._-]+$)##g')

          TAGS="${{ env.REGISTRY }}/${IMAGE_NAME}:sha-${{ github.sha }}"
          TAGS="${TAGS},${{ env.REGISTRY }}/${IMAGE_NAME}:branch-${SANITIZED_BRANCH}"
          
          if [[ "$SANITIZED_BRANCH" == "main" ]]; then
            TAGS="${TAGS},${{ env.REGISTRY }}/${IMAGE_NAME}:latest"
          fi
          
          echo "name=${IMAGE_NAME}" >> $GITHUB_OUTPUT
          echo "tags=${TAGS}" >> $GITHUB_OUTPUT
      
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.image.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
  
  scan:
    name: Scan Image (Trivy)
    runs-on: ubuntu-latest
    needs: docker
    continue-on-error: true
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Compute image ref
        id: ref
        run: |
          IMAGE_NAME=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          echo "image=${{ env.REGISTRY }}/${IMAGE_NAME}:sha-${{ github.sha }}" >> $GITHUB_OUTPUT
      
      - name: Trivy scan
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ steps.ref.outputs.image }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH,MEDIUM'
      
      - name: Upload Trivy SARIF to code scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif
      
      - name: Upload Trivy report artifact
        uses: actions/upload-artifact@v4
        with:
          name: trivy-results
          path: trivy-results.sarif
          retention-days: 7

  comment:
    name: PR Comment
    runs-on: ubuntu-latest
    needs: [test, docker, scan]
    if: github.event_name == 'pull_request' && !cancelled()
    
    steps:
      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const testSuccess = '${{ needs.test.result }}' === 'success';
            const dockerSuccess = '${{ needs.docker.result }}' === 'success';
            const scanSuccess = '${{ needs.scan.result }}' === 'success';
            const coverage = '${{ needs.test.outputs.coverage }}' || 'N/A';
            const imageName = '${{ needs.docker.outputs.image-name }}';
            
            let body = `## CI Results: ${testSuccess && dockerSuccess ? 'PASSED' : 'FAILED'}\n\n`;
            body += `Coverage: ${coverage}\n`;
            
            if (dockerSuccess) {
              body += `Docker Image: ${{ env.REGISTRY }}/${imageName}:sha-${{ github.sha }}\n`;
              body += `Package Registry: https://github.com/${{ github.repository }}/pkgs/container/${imageName.split('/')[1]}\n`;
            }
            
            body += `Image Scan: ${scanSuccess ? 'PASSED' : 'FAILED (non-blocking)'}\n`;
            body += `Artifacts: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body
            });