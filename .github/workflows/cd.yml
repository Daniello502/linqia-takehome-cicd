name: CD

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed

permissions:
  contents: read
  packages: read
  pull-requests: write

jobs:
  deploy-mock:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Download workflow run data
        uses: actions/github-script@v7
        id: meta
        with:
          script: |
            const run = context.payload.workflow_run;
            const pr = run.pull_requests && run.pull_requests[0];
            const prNumber = pr ? pr.number : null;
            return {
              prNumber,
              sha: run.head_sha,
              repo: run.repository.full_name
            };
      - name: Set outputs
        run: |
          echo "PR=${{ steps.meta.outputs.result && fromJson(steps.meta.outputs.result).prNumber }}" >> $GITHUB_ENV
          echo "SHA=${{ steps.meta.outputs.result && fromJson(steps.meta.outputs.result).sha }}" >> $GITHUB_ENV

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull image
        run: |
          docker pull ghcr.io/${{ github.repository }}:sha-${SHA}

      - name: Run container to mimic deploy
        id: run
        run: |
          set -e
          output=$(docker run --rm ghcr.io/${{ github.repository }}:sha-${SHA} 2 3)
          echo "result=$output" >> $GITHUB_OUTPUT

      - name: Comment on PR with deployment status
        if: env.PR != ''
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = process.env.PR;
            const result = `${{ steps.run.outputs.result }}`;
            const body = `CD succeeded. Pulled and ran image ghcr.io/${{ github.repository }}:sha-${process.env.SHA}.\n\nOutput of 'python -m sample_app 2 3': ${result}`;
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: Number(prNumber),
              body
            });